{"changed":true,"filter":false,"title":"abn_tree_directive.js","tooltip":"/Survey/components/makeQuestionnaire/abn_tree_directive.js","value":"(function() {\n  var module,\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nangular.module('tree', [])\n\n  .directive('abnTree', [\n    '$timeout', function($timeout) {\n      return {\n        restrict: 'E',\n        template: \"<ul class=\\\"nav nav-list nav-pills nav-stacked abn-tree\\\">\\n  <li ng-repeat=\\\"row in tree_rows | filter:{visible:true} track by row.branch.uid\\\" ng-animate=\\\"'abn-tree-animate'\\\" ng-class=\\\"'level-' + {{ row.level }} + (row.branch.selected ? ' active':'') + ' ' +row.classes.join(' ')\\\" class=\\\"abn-tree-row\\\"><a ng-click=\\\"user_clicks_branch(row.branch)\\\"><i ng-class=\\\"row.tree_icon\\\" ng-click=\\\"row.branch.expanded = !row.branch.expanded\\\" class=\\\"indented tree-icon\\\"> </i><span class=\\\"indented tree-label\\\">{{ row.label }} </span></a></li>\\n</ul>\",\n        replace: true,\n        scope: {\n          treeData: '=',\n          onSelect: '&',\n          initialSelection: '@',\n          treeControl: '='\n        },\n        link: function(scope, element, attrs) {\n          var error, expand_all_parents, expand_level, for_all_ancestors, for_each_branch, get_parent, n, on_treeData_change, select_branch, selected_branch, tree;\n          error = function(s) {\n            console.log('ERROR:' + s);\n            debugger;\n            return void 0;\n          };\n          if (attrs.iconExpand == null) {\n            attrs.iconExpand = 'icon-plus  glyphicon glyphicon-plus  fa fa-plus';\n          }\n          if (attrs.iconCollapse == null) {\n            attrs.iconCollapse = 'icon-minus glyphicon glyphicon-minus fa fa-minus';\n          }\n          if (attrs.iconLeaf == null) {\n            attrs.iconLeaf = 'icon-file  glyphicon glyphicon-file  fa fa-file';\n          }\n          if (attrs.expandLevel == null) {\n            attrs.expandLevel = '3';\n          }\n          expand_level = parseInt(attrs.expandLevel, 10);\n          if (!scope.treeData) {\n            alert('no treeData defined for the tree!');\n            return;\n          }\n          if (scope.treeData.length == null) {\n            if (treeData.label != null) {\n              scope.treeData = [treeData];\n            } else {\n              alert('treeData should be an array of root branches');\n              return;\n            }\n          }\n          for_each_branch = function(f) {\n            var do_f, root_branch, _i, _len, _ref, _results;\n            do_f = function(branch, level) {\n              var child, _i, _len, _ref, _results;\n              f(branch, level);\n              if (branch.children != null) {\n                _ref = branch.children;\n                _results = [];\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                  child = _ref[_i];\n                  _results.push(do_f(child, level + 1));\n                }\n                return _results;\n              }\n            };\n            _ref = scope.treeData;\n            _results = [];\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n              root_branch = _ref[_i];\n              _results.push(do_f(root_branch, 1));\n            }\n            return _results;\n          };\n          selected_branch = null;\n          select_branch = function(branch) {\n            if (!branch) {\n              if (selected_branch != null) {\n                selected_branch.selected = false;\n              }\n              selected_branch = null;\n              return;\n            }\n            if (branch !== selected_branch) {\n              if (selected_branch != null) {\n                selected_branch.selected = false;\n              }\n              branch.selected = true;\n              selected_branch = branch;\n              expand_all_parents(branch);\n              if (branch.onSelect != null) {\n                return $timeout(function() {\n                  return branch.onSelect(branch);\n                });\n              } else {\n                if (scope.onSelect != null) {\n                  return $timeout(function() {\n                    return scope.onSelect({\n                      branch: branch\n                    });\n                  });\n                }\n              }\n            }\n          };\n          scope.user_clicks_branch = function(branch) {\n            if (branch !== selected_branch) {\n              return select_branch(branch);\n            }\n          };\n          get_parent = function(child) {\n            var parent;\n            parent = void 0;\n            if (child.parent_uid) {\n              for_each_branch(function(b) {\n                if (b.uid === child.parent_uid) {\n                  return parent = b;\n                }\n              });\n            }\n            return parent;\n          };\n          for_all_ancestors = function(child, fn) {\n            var parent;\n            parent = get_parent(child);\n            if (parent != null) {\n              fn(parent);\n              return for_all_ancestors(parent, fn);\n            }\n          };\n          expand_all_parents = function(child) {\n            return for_all_ancestors(child, function(b) {\n              return b.expanded = true;\n            });\n          };\n          scope.tree_rows = [];\n          on_treeData_change = function() {\n            var add_branch_to_list, root_branch, _i, _len, _ref, _results;\n            for_each_branch(function(b, level) {\n              if (!b.uid) {\n                return b.uid = \"\" + Math.random();\n              }\n            });\n            console.log('UIDs are set.');\n            for_each_branch(function(b) {\n              var child, _i, _len, _ref, _results;\n              if (angular.isArray(b.children)) {\n                _ref = b.children;\n                _results = [];\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                  child = _ref[_i];\n                  _results.push(child.parent_uid = b.uid);\n                }\n                return _results;\n              }\n            });\n            scope.tree_rows = [];\n            for_each_branch(function(branch) {\n              var child, f;\n              if (branch.children) {\n                if (branch.children.length > 0) {\n                  f = function(e) {\n                    if (typeof e === 'string') {\n                      return {\n                        label: e,\n                        children: []\n                      };\n                    } else {\n                      return e;\n                    }\n                  };\n                  return branch.children = (function() {\n                    var _i, _len, _ref, _results;\n                    _ref = branch.children;\n                    _results = [];\n                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                      child = _ref[_i];\n                      _results.push(f(child));\n                    }\n                    return _results;\n                  })();\n                }\n              } else {\n                return branch.children = [];\n              }\n            });\n            add_branch_to_list = function(level, branch, visible) {\n              var child, child_visible, tree_icon, _i, _len, _ref, _results;\n              if (branch.expanded == null) {\n                branch.expanded = false;\n              }\n              if (branch.classes == null) {\n                branch.classes = [];\n              }\n              if (!branch.noLeaf && (!branch.children || branch.children.length === 0)) {\n                tree_icon = attrs.iconLeaf;\n                if (__indexOf.call(branch.classes, \"leaf\") < 0) {\n                  branch.classes.push(\"leaf\");\n                }\n              } else {\n                if (branch.expanded) {\n                  tree_icon = attrs.iconCollapse;\n                } else {\n                  tree_icon = attrs.iconExpand;\n                }\n              }\n              scope.tree_rows.push({\n                level: level,\n                branch: branch,\n                label: branch.label,\n                classes: branch.classes,\n                tree_icon: tree_icon,\n                visible: visible\n              });\n              if (branch.children != null) {\n                _ref = branch.children;\n                _results = [];\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                  child = _ref[_i];\n                  child_visible = visible && branch.expanded;\n                  _results.push(add_branch_to_list(level + 1, child, child_visible));\n                }\n                return _results;\n              }\n            };\n            _ref = scope.treeData;\n            _results = [];\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n              root_branch = _ref[_i];\n              _results.push(add_branch_to_list(1, root_branch, true));\n            }\n            return _results;\n          };\n          scope.$watch('treeData', on_treeData_change, true);\n          if (attrs.initialSelection != null) {\n            for_each_branch(function(b) {\n              if (b.label === attrs.initialSelection) {\n                return $timeout(function() {\n                  return select_branch(b);\n                });\n              }\n            });\n          }\n          n = scope.treeData.length;\n          console.log('num root branches = ' + n);\n          for_each_branch(function(b, level) {\n            b.level = level;\n            return b.expanded = b.level < expand_level;\n          });\n          if (scope.treeControl != null) {\n            if (angular.isObject(scope.treeControl)) {\n              tree = scope.treeControl;\n              tree.expand_all = function() {\n                return for_each_branch(function(b, level) {\n                  return b.expanded = true;\n                });\n              };\n              tree.collapse_all = function() {\n                return for_each_branch(function(b, level) {\n                  return b.expanded = false;\n                });\n              };\n              tree.get_first_branch = function() {\n                n = scope.treeData.length;\n                if (n > 0) {\n                  return scope.treeData[0];\n                }\n              };\n              tree.select_first_branch = function() {\n                var b;\n                b = tree.get_first_branch();\n                return tree.select_branch(b);\n              };\n              tree.get_selected_branch = function() {\n                return selected_branch;\n              };\n              tree.get_parent_branch = function(b) {\n                return get_parent(b);\n              };\n              tree.select_branch = function(b) {\n                select_branch(b);\n                return b;\n              };\n              tree.get_children = function(b) {\n                return b.children;\n              };\n              tree.select_parent_branch = function(b) {\n                var p;\n                if (b == null) {\n                  b = tree.get_selected_branch();\n                }\n                if (b != null) {\n                  p = tree.get_parent_branch(b);\n                  if (p != null) {\n                    tree.select_branch(p);\n                    return p;\n                  }\n                }\n              };\n              tree.add_branch = function(parent, new_branch) {\n                if (parent != null) {\n                  parent.children.push(new_branch);\n                  parent.expanded = true;\n                } else {\n                  scope.treeData.push(new_branch);\n                }\n                return new_branch;\n              };\n              tree.add_root_branch = function(new_branch) {\n                tree.add_branch(null, new_branch);\n                return new_branch;\n              };\n              tree.expand_branch = function(b) {\n                if (b == null) {\n                  b = tree.get_selected_branch();\n                }\n                if (b != null) {\n                  b.expanded = true;\n                  return b;\n                }\n              };\n              tree.collapse_branch = function(b) {\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  b.expanded = false;\n                  return b;\n                }\n              };\n              tree.get_siblings = function(b) {\n                var p, siblings;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  p = tree.get_parent_branch(b);\n                  if (p) {\n                    siblings = p.children;\n                  } else {\n                    siblings = scope.treeData;\n                  }\n                  return siblings;\n                }\n              };\n              tree.get_next_sibling = function(b) {\n                var i, siblings;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  siblings = tree.get_siblings(b);\n                  n = siblings.length;\n                  i = siblings.indexOf(b);\n                  if (i < n) {\n                    return siblings[i + 1];\n                  }\n                }\n              };\n              tree.get_prev_sibling = function(b) {\n                var i, siblings;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                siblings = tree.get_siblings(b);\n                n = siblings.length;\n                i = siblings.indexOf(b);\n                if (i > 0) {\n                  return siblings[i - 1];\n                }\n              };\n              tree.select_next_sibling = function(b) {\n                var next;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  next = tree.get_next_sibling(b);\n                  if (next != null) {\n                    return tree.select_branch(next);\n                  }\n                }\n              };\n              tree.select_prev_sibling = function(b) {\n                var prev;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  prev = tree.get_prev_sibling(b);\n                  if (prev != null) {\n                    return tree.select_branch(prev);\n                  }\n                }\n              };\n              tree.get_first_child = function(b) {\n                var _ref;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  if (((_ref = b.children) != null ? _ref.length : void 0) > 0) {\n                    return b.children[0];\n                  }\n                }\n              };\n              tree.get_closest_ancestor_next_sibling = function(b) {\n                var next, parent;\n                next = tree.get_next_sibling(b);\n                if (next != null) {\n                  return next;\n                } else {\n                  parent = tree.get_parent_branch(b);\n                  return tree.get_closest_ancestor_next_sibling(parent);\n                }\n              };\n              tree.get_next_branch = function(b) {\n                var next;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  next = tree.get_first_child(b);\n                  if (next != null) {\n                    return next;\n                  } else {\n                    next = tree.get_closest_ancestor_next_sibling(b);\n                    return next;\n                  }\n                }\n              };\n              tree.select_next_branch = function(b) {\n                var next;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  next = tree.get_next_branch(b);\n                  if (next != null) {\n                    tree.select_branch(next);\n                    return next;\n                  }\n                }\n              };\n              tree.last_descendant = function(b) {\n                var last_child;\n                if (b == null) {\n                  debugger;\n                }\n                n = b.children.length;\n                if (n === 0) {\n                  return b;\n                } else {\n                  last_child = b.children[n - 1];\n                  return tree.last_descendant(last_child);\n                }\n              };\n              tree.get_prev_branch = function(b) {\n                var parent, prev_sibling;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  prev_sibling = tree.get_prev_sibling(b);\n                  if (prev_sibling != null) {\n                    return tree.last_descendant(prev_sibling);\n                  } else {\n                    parent = tree.get_parent_branch(b);\n                    return parent;\n                  }\n                }\n              };\n              return tree.select_prev_branch = function(b) {\n                var prev;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  prev = tree.get_prev_branch(b);\n                  if (prev != null) {\n                    tree.select_branch(prev);\n                    return prev;\n                  }\n                }\n              };\n            }\n          }\n        }\n      };\n    }\n  ]);\n\n}).call(this);\n","undoManager":{"mark":8,"position":10,"stack":[[{"start":{"row":6,"column":14},"end":{"row":6,"column":21},"action":"remove","lines":["abnTree"],"id":12},{"start":{"row":6,"column":14},"end":{"row":6,"column":15},"action":"insert","lines":["t"]}],[{"start":{"row":6,"column":15},"end":{"row":6,"column":16},"action":"insert","lines":["r"],"id":13}],[{"start":{"row":6,"column":16},"end":{"row":6,"column":17},"action":"insert","lines":["e"],"id":14}],[{"start":{"row":6,"column":17},"end":{"row":6,"column":18},"action":"insert","lines":["e"],"id":15}],[{"start":{"row":4,"column":16},"end":{"row":4,"column":28},"action":"remove","lines":["thinkLibrary"],"id":17},{"start":{"row":4,"column":16},"end":{"row":4,"column":17},"action":"insert","lines":["t"]}],[{"start":{"row":4,"column":17},"end":{"row":4,"column":18},"action":"insert","lines":["r"],"id":18}],[{"start":{"row":4,"column":18},"end":{"row":4,"column":19},"action":"insert","lines":["e"],"id":19}],[{"start":{"row":4,"column":19},"end":{"row":4,"column":20},"action":"insert","lines":["e"],"id":20}],[{"start":{"row":6,"column":14},"end":{"row":6,"column":18},"action":"remove","lines":["tree"],"id":21},{"start":{"row":6,"column":14},"end":{"row":6,"column":21},"action":"insert","lines":["abnTree"]}],[{"start":{"row":10,"column":8},"end":{"row":10,"column":9},"action":"insert","lines":["0"],"id":22}],[{"start":{"row":10,"column":8},"end":{"row":10,"column":9},"action":"remove","lines":["0"],"id":23}]]},"ace":{"folds":[],"scrolltop":3540,"scrollleft":0,"selection":{"start":{"row":14,"column":0},"end":{"row":14,"column":0},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":61,"state":"no_regex","mode":"ace/mode/javascript"}},"timestamp":1470382744115}